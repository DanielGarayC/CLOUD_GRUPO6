
services:
  auth:
    build: ./backend/auth
    ports:
      - "8080:8080"
    depends_on:
      - slice_db
    environment:
      DB_HOST: slice_db
      DB_USER: root
      DB_PASSWORD: root
      DB_NAME: mydb
      SECRET_KEY: supersecreto
    networks:
      - cloudnet

  #auth_db:
   # image: mysql:8.0
    #environment:
     # MYSQL_ROOT_PASSWORD: rootpassword
      #MYSQL_DATABASE: auth_db
      #MYSQL_USER: user
      #MYSQL_PASSWORD: root
    #ports:
    #  - "3307:3306"
    #volumes:
      #Acá debe estar el script SQL para crear las tablas owo
     # - ./backend/auth/sql-script:/docker-entrypoint-initdb.d
    #networks:
    #  - cloudnet

  #frontend:
    #build: ./frontend
    #ports:
    #  - "3000:3000"

  gateway:
    image: nginx:alpine
    volumes:
      - ./gateway/api_gateway.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    depends_on:
      #- backend
      - auth
    networks:
      - cloudnet

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: web_app
    command: python app.py
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - IN_DOCKER=true
    depends_on:
      - slice_db
      - grafana
    volumes:
      - ./frontend:/app
    networks:
      - cloudnet

  slice_db:
    image: mysql:8.0
    container_name: slice_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: mydb
    ports:
      - "3308:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./db/slice_db.sql:/docker-entrypoint-initdb.d/slice_db.sql
    networks:
      - cloudnet
  test_service:
    build: ./backend/test_service
    container_name: test_service
    command: uvicorn test_service:app --host 0.0.0.0 --port 4000
    networks:
      - cloudnet


  #serviceA_db:
  #  image: mysql:8.0
  #  environment:
  #    MYSQL_ROOT_PASSWORD: rootpassword
  #    MYSQL_DATABASE: serviceA_db
  #    MYSQL_USER: user
  #    MYSQL_PASSWORD: root
  #  ports:
  #    - "3308:3306"
  #  volumes:
  #    #Acá debe estar el script SQL para crear las tablas owo
  #    - ./resourceMonitoring/sql-script:/docker-entrypoint-initdb.d

  #serviceB_db:
  #  image: mysql:8.0
  #  environment:
  #    MYSQL_ROOT_PASSWORD: rootpassword
  #    MYSQL_DATABASE: serviceB_db
  #    MYSQL_USER: user
  #    MYSQL_PASSWORD: root
  #  ports:
  #    - "3309:3306"
  #  volumes:
  #    #Acá debe estar el script SQL para crear las tablas owo
  #    - ./userService/sql-script:/docker-entrypoint-initdb.d
  
# Grafanita
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3000/
      - GF_SECURITY_COOKIE_SAMESITE=none
      - GF_SECURITY_COOKIE_SECURE=false
    volumes: 
      - ./grafana_data:/var/lib/grafana 
    networks:
      - cloudnet

# Loki y Promtail
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/local-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - cloudnet

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    user: root
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./loki/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - cloudnet



  slice-manager:
    build: ./backend/sliceManager
    container_name: slice-manager
    ports:
    - "8000:8000"  
    networks: [cloudnet]

  linux-driver:
    build: ./backend/linux-driver
    container_name: linux-driver
    ports:
      - "9100:9100"
    environment:
      - SSH_KEY=/home/ubuntu/.ssh/id_rsa_orch
      - USER=ubuntu
      - OVS_BRIDGE=br-int
    networks: [cloudnet]

# Kafka
  
  #Network&Security
  network_manager:
    build: ./backend/network_manager
    container_name: network_manager
    ports:
      - "8100:8100"
    depends_on:
      - slice_db
    environment:
      DB_HOST: slice_db
      DB_USER: root
      DB_PASSWORD: root
      DB_NAME: slice_db
    networks:
      - cloudnet 

      


networks:
  cloudnet:
    driver: bridge
    attachable: true

volumes: 
  grafana_storage: {}
  db_data: {}
