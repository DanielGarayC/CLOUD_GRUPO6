
services:
  auth:
    build: ./backend/auth
    ports:
      - "8080:8080"
    depends_on:
      - auth_db
    environment:
      DB_HOST: auth_db
      DB_USER: user
      DB_PASSWORD: root
      DB_NAME: auth_db
      SECRET_KEY: supersecreto
    networks:
      - cloudnet

  auth_db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: auth_db
      MYSQL_USER: user
      MYSQL_PASSWORD: root
    ports:
      - "3307:3306"
    volumes:
      #Acá debe estar el script SQL para crear las tablas owo
      - ./backend/auth/sql-script:/docker-entrypoint-initdb.d
    networks:
      - cloudnet

  #frontend:
    #build: ./frontend
    #ports:
    #  - "3000:3000"

  gateway:
    image: nginx:alpine
    volumes:
      - ./gateway/api_gateway.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    depends_on:
      #- backend
      - auth
    networks:
      - cloudnet

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: web_app
    command: python app.py
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - IN_DOCKER=true
    depends_on:
      - slice_db
      - grafana
    volumes:
      - ./frontend:/app
    networks:
      - cloudnet

  slice_db:
    image: mysql:8.0
    container_name: slice_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: slice_db
    ports:
      - "3308:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./db/slice_db.sql:/docker-entrypoint-initdb.d/slice_db.sql
    networks:
      - cloudnet


  #serviceA_db:
  #  image: mysql:8.0
  #  environment:
  #    MYSQL_ROOT_PASSWORD: rootpassword
  #    MYSQL_DATABASE: serviceA_db
  #    MYSQL_USER: user
  #    MYSQL_PASSWORD: root
  #  ports:
  #    - "3308:3306"
  #  volumes:
  #    #Acá debe estar el script SQL para crear las tablas owo
  #    - ./resourceMonitoring/sql-script:/docker-entrypoint-initdb.d

  #serviceB_db:
  #  image: mysql:8.0
  #  environment:
  #    MYSQL_ROOT_PASSWORD: rootpassword
  #    MYSQL_DATABASE: serviceB_db
  #    MYSQL_USER: user
  #    MYSQL_PASSWORD: root
  #  ports:
  #    - "3309:3306"
  #  volumes:
  #    #Acá debe estar el script SQL para crear las tablas owo
  #    - ./userService/sql-script:/docker-entrypoint-initdb.d
  
# Grafanita
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3000/
      - GF_SECURITY_COOKIE_SAMESITE=none
      - GF_SECURITY_COOKIE_SECURE=false
    volumes: 
      - ./grafana_data:/var/lib/grafana 
    networks:
      - cloudnet

# Loki y Promtail
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/local-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - cloudnet

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    user: root
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./loki/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - cloudnet



  slice-manager:
    build: ./backend/sliceManager
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
    depends_on: [kafka, init-topics]
    ports:
    - "8000:8000"  
    networks: [cloudnet]

  linux-driver:
    build: ./backend/linux-driver
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - KAFKA_TOPIC=slice.driver.linux
      - KAFKA_GROUP=linux-driver-group
    depends_on: [kafka, init-topics]
    networks: [cloudnet]

# Kafka
  kafka:
    image: apache/kafka:4.0.1
    container_name: kafka
    # Puerto 9094 para probar desde tu host (Windows). Dentro de Docker sigue siendo kafka:9092
    ports:
      - "9094:9094"
    environment:
      # --- KRaft single-node ---
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093

      # --- Listeners internos/externos ---
      # DOCKER: para contenedores (kafka:9092)
      # HOST: para tu máquina (localhost:9094)
      # CONTROLLER: interno KRaft
      KAFKA_LISTENERS: CONTROLLER://:9093,DOCKER://0.0.0.0:9092,HOST://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: DOCKER://kafka:9092,HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # --- Ajustes dev single-broker ---
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks: [cloudnet]
    healthcheck:
      test: ["CMD","bash","-lc","/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 20

  # Creador de topics (espera a que Kafka esté healthy)
  init-topics:
    image: apache/kafka:4.0.1
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ "bash", "-lc" ]
    command: |
      until /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list >/dev/null 2>&1; do
        echo "Esperando a Kafka..."; sleep 2;
      done
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 \
        --create --topic slice.driver.linux --partitions 1 --replication-factor 1 || true
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 \
        --create --topic slice.events --partitions 1 --replication-factor 1 || true
      echo "Topics listos."
      tail -f /dev/null
    networks: [cloudnet]

networks:
  cloudnet:
    driver: bridge
    attachable: true

volumes: 
  grafana_storage: {}
  db_data: